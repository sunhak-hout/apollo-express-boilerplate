scalar DateTime

type Query {
  categoryPagination: CategoryPagination!
  ping: Ping!
  me: User!
}

type Ping {
  fieldA: String!
  fieldB: String!
  fieldC: String!
}

type Mutation {
  categoryCreate(input: CategoryCreateInput!): Category!
  categoryUpdate(input: CategoryUpdateInput!): Category!
  categoryDelete(id: Int!): Category!
  login(input: LoginInput): String!
  register(input: RegisterInput): User!
}

type CategoryPagination {
  items: [Category!]!
  count: Int!
}

type Category {
  id: Int!
  uid: String!
  slug: String!
  name: String!
  description: String
  parent: Category
  children: [Category!]!
  createdAt: String!
  updatedAt: DateTime!
}

type User {
  id: Int!
  uid: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input CategoryCreateInput {
  name: String!
  description: String
  parentId: Int
}

input CategoryUpdateInput {
  id: Int!
  name: String
  description: String
  parentId: Int
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  email: String!
  password: String!
}
